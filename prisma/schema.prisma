// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Object {
  id                  Int              @id @default(autoincrement())
  realtor_id          Realtor[]
  object_type_id      ObjectType[]
  residence_type_id   ResidenceType[]
  object_category_id  ObjectCategory[]
  object_status_id    ObjectStatus[]
  is_studio           Boolean
  floor               Int
  floors_in_building  Int
  total_area          Float
  live_area           Float
  kitchen_area        Float
  rooms_area          Float
  price               Float
  currency_id         Currency[]
  price_per_square    Int
  price_type          Int
  renovation_id       Renovation[]
  window_side_id      WindowSide[]
  room_type_id        RoomType[]
  is_appartment       Boolean
  is_luxury           Boolean
  ceiling_height      Float
  combined_bath_count Int
  separate_bath_count Int
  loggia_cont         Int
  loggia_description  String
  balcony_count       Int
  balcony_description String
  general_description String
  cadastral_number    Int
  document            String
  layout              String
  fotos               String
  online_show         Boolean
  video               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("objects")
}

model ObjectType {
  id   Int    @id @default(autoincrement())
  name String

  Object   Object? @relation(fields: [objectId], references: [id])
  objectId Int?
}

model Realtor {
  id              Int      @id @default(autoincrement())
  name            String
  is_active       Boolean
  firma_id        Int
  reg_date        DateTime
  deactivate_date DateTime
  photo           String
  login           String
  password        String
  Object          Object?  @relation(fields: [objectId], references: [id])
  objectId        Int?
}

model ResidenceType {
  id             Int     @id @default(autoincrement())
  object_type_id Int
  name           String
  Object         Object? @relation(fields: [objectId], references: [id])
  objectId       Int?
}

model ObjectCategory {
  id       Int     @id @default(autoincrement())
  name     String
  Object   Object? @relation(fields: [objectId], references: [id])
  objectId Int?
}

model ObjectStatus {
  id       Int     @id @default(autoincrement())
  name     String
  Object   Object? @relation(fields: [objectId], references: [id])
  objectId Int?
}

model Currency {
  id       Int     @id @default(autoincrement())
  name     String
  rate     Float
  Object   Object? @relation(fields: [objectId], references: [id])
  objectId Int?
}

model Renovation {
  id       Int     @id @default(autoincrement())
  name     String
  Object   Object? @relation(fields: [objectId], references: [id])
  objectId Int?
}

model WindowSide {
  id       Int     @id @default(autoincrement())
  name     String
  Object   Object? @relation(fields: [objectId], references: [id])
  objectId Int?
}

model RoomType {
  id       Int     @id @default(autoincrement())
  name     String
  Object   Object? @relation(fields: [objectId], references: [id])
  objectId Int?
}

model OwnerRealtion {
  id                   Int                @id @default(autoincrement())
  ownership_id         OwnerShip[]
  reason_deleting_id   ReasonDeleting[]
  owner_cooperation_id OwnerCooperation[]
  relationship_id      RelationShipType[]
  comission_amount     Float
  comission_comment    String
  deposit_amount       Float
  deposit_paid         Float
  owner_price_ideal    Float
  owner_price_real     Float
  owner_price_minimal  Float
}

model OwnerShip {
  id              Int            @id @default(autoincrement())
  name            String
  OwnerRealtion   OwnerRealtion? @relation(fields: [ownerRealtionId], references: [id])
  ownerRealtionId Int?
}

model ReasonDeleting {
  id              Int            @id @default(autoincrement())
  name            String
  OwnerRealtion   OwnerRealtion? @relation(fields: [ownerRealtionId], references: [id])
  ownerRealtionId Int?
}

model OwnerCooperation {
  id              Int            @id @default(autoincrement())
  name            String
  OwnerRealtion   OwnerRealtion? @relation(fields: [ownerRealtionId], references: [id])
  ownerRealtionId Int?
}

model RelationShipType {
  id              Int            @id @default(autoincrement())
  name            String
  OwnerRealtion   OwnerRealtion? @relation(fields: [ownerRealtionId], references: [id])
  ownerRealtionId Int?
}

model Address {
  id                   Int        @id @default(autoincrement())
  region_id            Region[]
  district_id          District[]
  area_id              Int
  mahalla_id           Int
  street_id            Int
  house_number         Int
  apartment_number     Int
  locataion            String
  landmark             String
  metro_id             Metro[]
  location_description String
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String
  Address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?
}

model District {
  id        Int      @id @default(autoincrement())
  region_id Int
  name      String
  Address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?
}

model Metro {
  id        Int      @id @default(autoincrement())
  name      String
  Address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?
}

model BuildingCharacter {
  id                        Int                 @id @default(autoincrement())
  building_conditation_id   BuildingCondition[]
  building_seria            BuildingSeria[]
  building_year             DateTime
  wall_material_id          WallMaterial[]
  overlaps_id               Overlaps[]
  water_supply_id           WaterSupply[]
  heating_system_id         HeatingSystem[]
  is_gas                    Boolean
  is_electric               Boolean
  passenger_elevators_count Int
  freight_elevators_count   Int
  is_building_security      Boolean
  parking_id                Parking[]
  is_demolition_planned     Int
}

model BuildingCondition {
  id                  Int                @id @default(autoincrement())
  name                String
  BuildingCharacter   BuildingCharacter? @relation(fields: [buildingCharacterId], references: [id])
  buildingCharacterId Int?
}

model BuildingSeria {
  id                  Int                @id @default(autoincrement())
  name                String
  BuildingCharacter   BuildingCharacter? @relation(fields: [buildingCharacterId], references: [id])
  buildingCharacterId Int?
}

model WallMaterial {
  id                  Int                @id @default(autoincrement())
  name                String
  BuildingCharacter   BuildingCharacter? @relation(fields: [buildingCharacterId], references: [id])
  buildingCharacterId Int?
}

model Overlaps {
  id                  Int                @id @default(autoincrement())
  name                String
  BuildingCharacter   BuildingCharacter? @relation(fields: [buildingCharacterId], references: [id])
  buildingCharacterId Int?
}

model WaterSupply {
  id                  Int                @id @default(autoincrement())
  name                String
  BuildingCharacter   BuildingCharacter? @relation(fields: [buildingCharacterId], references: [id])
  buildingCharacterId Int?
}

model HeatingSystem {
  id                  Int                @id @default(autoincrement())
  name                String
  BuildingCharacter   BuildingCharacter? @relation(fields: [buildingCharacterId], references: [id])
  buildingCharacterId Int?
}

model Parking {
  id                  Int                @id @default(autoincrement())
  name                String
  BuildingCharacter   BuildingCharacter? @relation(fields: [buildingCharacterId], references: [id])
  buildingCharacterId Int?
}
